// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: gpu.capnp

#include "gpu.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<16> b_ce90ed72c32fd775 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    117, 215,  47, 195, 114, 237, 144, 206,
     10,   0,   0,   0,   1,   0,   0,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0, 163,   0,   0,   0,
     21,   0,   0,   0, 122,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  86, 111, 105, 100,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ce90ed72c32fd775 = b_ce90ed72c32fd775.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ce90ed72c32fd775 = {
  0xce90ed72c32fd775, b_ce90ed72c32fd775.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ce90ed72c32fd775, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_c77b91dfac0d4604 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
      4,  70,  13, 172, 223, 145, 123, 199,
     10,   0,   0,   0,   1,   0,   0,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    167,   0,   0,   0, 245,   0,   0,   0,
     21,   0,   0,   0, 146,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  76, 105, 115,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    103, 112, 117, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    234,  33,  79, 117, 102,  60, 226, 203,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c77b91dfac0d4604 = b_c77b91dfac0d4604.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c77b91dfac0d4604[] = {
  &s_cbe23c66754f21ea,
};
static const uint16_t m_c77b91dfac0d4604[] = {0};
static const uint16_t i_c77b91dfac0d4604[] = {0};
const ::capnp::_::RawSchema s_c77b91dfac0d4604 = {
  0xc77b91dfac0d4604, b_c77b91dfac0d4604.words, 37, d_c77b91dfac0d4604, m_c77b91dfac0d4604,
  1, 1, i_c77b91dfac0d4604, nullptr, nullptr, { &s_c77b91dfac0d4604, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_a93ee2af2d528d0f = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     15, 141,  82,  45, 175, 226,  62, 169,
     10,   0,   0,   0,   1,   0,   0,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    249,   0,   0,   0,  35,   1,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  82, 101, 113,
    117, 101, 115, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    117, 117, 105, 100,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a93ee2af2d528d0f = b_a93ee2af2d528d0f.words;
#if !CAPNP_LITE
static const uint16_t m_a93ee2af2d528d0f[] = {0};
static const uint16_t i_a93ee2af2d528d0f[] = {0};
const ::capnp::_::RawSchema s_a93ee2af2d528d0f = {
  0xa93ee2af2d528d0f, b_a93ee2af2d528d0f.words, 33, nullptr, m_a93ee2af2d528d0f,
  0, 1, i_a93ee2af2d528d0f, nullptr, nullptr, { &s_a93ee2af2d528d0f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_fd9634edf885c4c7 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    199, 196, 133, 248, 237,  52, 150, 253,
     10,   0,   0,   0,   1,   0,   3,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     39,   1,   0,   0, 144,   1,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 116,  97,
    116, 117, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101, 100,  77, 101, 109, 111,
    114, 121,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 116, 105, 108, 105, 122,  97, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 118,  97, 105, 108,  97,  98, 108,
    101,  77, 101, 109, 111, 114, 121,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fd9634edf885c4c7 = b_fd9634edf885c4c7.words;
#if !CAPNP_LITE
static const uint16_t m_fd9634edf885c4c7[] = {2, 0, 1};
static const uint16_t i_fd9634edf885c4c7[] = {0, 1, 2};
const ::capnp::_::RawSchema s_fd9634edf885c4c7 = {
  0xfd9634edf885c4c7, b_fd9634edf885c4c7.words, 66, nullptr, m_fd9634edf885c4c7,
  0, 3, i_fd9634edf885c4c7, nullptr, nullptr, { &s_fd9634edf885c4c7, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<47> b_ca82d2fbbf527577 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    119, 117,  82, 191, 251, 210, 130, 202,
     10,   0,   0,   0,   2,   0,   0,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    148,   1,   0,   0,  29,   2,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 151,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  69, 114, 114, 111, 114,  67,
    111, 100, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     24,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 107,   0,   0,   0,   0,   0,   0,
    111, 117, 116,  79, 102,  77, 101, 109,
    111, 114, 121,   0,   0,   0,   0,   0,
    103, 112, 117,  78, 111, 116,  70, 111,
    117, 110, 100,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,  69, 114,
    114, 111, 114,   0,   0,   0,   0,   0,
    107, 101, 114, 110, 101, 108,  76,  97,
    117, 110,  99, 104,  70,  97, 105, 108,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 110, 107, 110, 111, 119, 110,   0, }
};
::capnp::word const* const bp_ca82d2fbbf527577 = b_ca82d2fbbf527577.words;
#if !CAPNP_LITE
static const uint16_t m_ca82d2fbbf527577[] = {2, 4, 0, 1, 3, 5};
const ::capnp::_::RawSchema s_ca82d2fbbf527577 = {
  0xca82d2fbbf527577, b_ca82d2fbbf527577.words, 47, nullptr, m_ca82d2fbbf527577,
  0, 6, nullptr, nullptr, nullptr, { &s_ca82d2fbbf527577, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(ErrorCode_ca82d2fbbf527577, ca82d2fbbf527577);
static const ::capnp::_::AlignedData<62> b_8919227b14062469 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    105,  36,   6,  20, 123,  34,  25, 137,
     10,   0,   0,   0,   1,   0,   1,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   2,   0,   0, 110,   2,   0,   0,
     21,   0,   0,   0, 114,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  65,  99, 107,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    111, 107,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 115, 103,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 100, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    119, 117,  82, 191, 251, 210, 130, 202,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8919227b14062469 = b_8919227b14062469.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8919227b14062469[] = {
  &s_ca82d2fbbf527577,
};
static const uint16_t m_8919227b14062469[] = {2, 1, 0};
static const uint16_t i_8919227b14062469[] = {0, 1, 2};
const ::capnp::_::RawSchema s_8919227b14062469 = {
  0x8919227b14062469, b_8919227b14062469.words, 62, d_8919227b14062469, m_8919227b14062469,
  1, 3, i_8919227b14062469, nullptr, nullptr, { &s_8919227b14062469, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<64> b_adf9e33c79faff3b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     59, 255, 250, 121,  60, 227, 249, 173,
     10,   0,   0,   0,   1,   0,   1,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   2,   0,   0, 243,   2,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  82, 117, 110,  82, 101, 113,
    117, 101, 115, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    117, 117, 105, 100,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 109, 100,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,  72,  97,
    110, 100, 108, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_adf9e33c79faff3b = b_adf9e33c79faff3b.words;
#if !CAPNP_LITE
static const uint16_t m_adf9e33c79faff3b[] = {1, 2, 0};
static const uint16_t i_adf9e33c79faff3b[] = {0, 1, 2};
const ::capnp::_::RawSchema s_adf9e33c79faff3b = {
  0xadf9e33c79faff3b, b_adf9e33c79faff3b.words, 64, nullptr, m_adf9e33c79faff3b,
  0, 3, i_adf9e33c79faff3b, nullptr, nullptr, { &s_adf9e33c79faff3b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_e5463c8c48d111ed = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    237,  17, 209,  72, 140,  60,  70, 229,
     10,   0,   0,   0,   1,   0,   1,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    247,   2,   0,   0,  61,   3,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  82, 117, 110,  82, 101, 115,
    112, 111, 110, 115, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    101, 120, 105, 116,  67, 111, 100, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116, 112, 117, 116,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e5463c8c48d111ed = b_e5463c8c48d111ed.words;
#if !CAPNP_LITE
static const uint16_t m_e5463c8c48d111ed[] = {0, 1};
static const uint16_t i_e5463c8c48d111ed[] = {0, 1};
const ::capnp::_::RawSchema s_e5463c8c48d111ed = {
  0xe5463c8c48d111ed, b_e5463c8c48d111ed.words, 49, nullptr, m_e5463c8c48d111ed,
  0, 2, i_e5463c8c48d111ed, nullptr, nullptr, { &s_e5463c8c48d111ed, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<79> b_c91259d7a11ce874 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    116, 232,  28, 161, 215,  89,  18, 201,
     10,   0,   0,   0,   1,   0,   4,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103,   3,   0,   0, 221,   3,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  77, 101, 109,  99, 112, 121,
     80,  97, 114,  97, 109, 115,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,  12,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
    115, 114,  99,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 115, 116,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 114, 101,  99, 116, 105, 111,
    110,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    140, 145, 245, 155, 206,  28,   6, 252,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c91259d7a11ce874 = b_c91259d7a11ce874.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c91259d7a11ce874[] = {
  &s_fc061cce9bf5918c,
};
static const uint16_t m_c91259d7a11ce874[] = {3, 1, 2, 0};
static const uint16_t i_c91259d7a11ce874[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_c91259d7a11ce874 = {
  0xc91259d7a11ce874, b_c91259d7a11ce874.words, 79, d_c91259d7a11ce874, m_c91259d7a11ce874,
  1, 4, i_c91259d7a11ce874, nullptr, nullptr, { &s_c91259d7a11ce874, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_fc061cce9bf5918c = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    140, 145, 245, 155, 206,  28,   6, 252,
     10,   0,   0,   0,   2,   0,   0,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    225,   3,   0,   0,  56,   4,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  79,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  68, 105, 114, 101,  99, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 115, 116,  84, 111,  68, 101,
    118, 105,  99, 101,   0,   0,   0,   0,
    100, 101, 118, 105,  99, 101,  84, 111,
     72, 111, 115, 116,   0,   0,   0,   0,
    100, 101, 118, 105,  99, 101,  84, 111,
     68, 101, 118, 105,  99, 101,   0,   0, }
};
::capnp::word const* const bp_fc061cce9bf5918c = b_fc061cce9bf5918c.words;
#if !CAPNP_LITE
static const uint16_t m_fc061cce9bf5918c[] = {2, 1, 0};
const ::capnp::_::RawSchema s_fc061cce9bf5918c = {
  0xfc061cce9bf5918c, b_fc061cce9bf5918c.words, 33, nullptr, m_fc061cce9bf5918c,
  0, 3, nullptr, nullptr, nullptr, { &s_fc061cce9bf5918c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Direction_fc061cce9bf5918c, fc061cce9bf5918c);
static const ::capnp::_::AlignedData<48> b_e2e9bf74e1174334 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     52,  67,  23, 225, 116, 191, 233, 226,
     10,   0,   0,   0,   1,   0,   2,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   4,   0,   0, 127,   4,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  67, 117, 100,  97,  77, 101,
    109,  73, 110, 102, 111,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     97, 100, 100, 114,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e2e9bf74e1174334 = b_e2e9bf74e1174334.words;
#if !CAPNP_LITE
static const uint16_t m_e2e9bf74e1174334[] = {0, 1};
static const uint16_t i_e2e9bf74e1174334[] = {0, 1};
const ::capnp::_::RawSchema s_e2e9bf74e1174334 = {
  0xe2e9bf74e1174334, b_e2e9bf74e1174334.words, 48, nullptr, m_e2e9bf74e1174334,
  0, 2, i_e2e9bf74e1174334, nullptr, nullptr, { &s_e2e9bf74e1174334, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_922d050b18310d01 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
      1,  13,  49,  24,  11,   5,  45, 146,
     10,   0,   0,   0,   1,   0,   1,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    174,   4,   0,   0, 222,   4,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  83, 116, 114, 101,  97, 109,
     72,  97, 110, 100, 108, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_922d050b18310d01 = b_922d050b18310d01.words;
#if !CAPNP_LITE
static const uint16_t m_922d050b18310d01[] = {0};
static const uint16_t i_922d050b18310d01[] = {0};
const ::capnp::_::RawSchema s_922d050b18310d01 = {
  0x922d050b18310d01, b_922d050b18310d01.words, 33, nullptr, m_922d050b18310d01,
  0, 1, i_922d050b18310d01, nullptr, nullptr, { &s_922d050b18310d01, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_ff2b9f1eed0431c5 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    197,  49,   4, 237,  30, 159,  43, 255,
     10,   0,   0,   0,   1,   0,   1,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    226,   4,   0,   0,  17,   5,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  69, 118, 101, 110, 116,  72,
     97, 110, 100, 108, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ff2b9f1eed0431c5 = b_ff2b9f1eed0431c5.words;
#if !CAPNP_LITE
static const uint16_t m_ff2b9f1eed0431c5[] = {0};
static const uint16_t i_ff2b9f1eed0431c5[] = {0};
const ::capnp::_::RawSchema s_ff2b9f1eed0431c5 = {
  0xff2b9f1eed0431c5, b_ff2b9f1eed0431c5.words, 33, nullptr, m_ff2b9f1eed0431c5,
  0, 1, i_ff2b9f1eed0431c5, nullptr, nullptr, { &s_ff2b9f1eed0431c5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b9d70b92a04830d4 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    212,  48,  72, 160, 146,  11, 215, 185,
     10,   0,   0,   0,   1,   0,   1,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   5,   0,   0,  74,   5,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  83, 116, 114, 101,  97, 109,
     67, 114, 101,  97, 116, 101,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102, 108,  97, 103, 115,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9d70b92a04830d4 = b_b9d70b92a04830d4.words;
#if !CAPNP_LITE
static const uint16_t m_b9d70b92a04830d4[] = {0};
static const uint16_t i_b9d70b92a04830d4[] = {0};
const ::capnp::_::RawSchema s_b9d70b92a04830d4 = {
  0xb9d70b92a04830d4, b_b9d70b92a04830d4.words, 34, nullptr, m_b9d70b92a04830d4,
  0, 1, i_b9d70b92a04830d4, nullptr, nullptr, { &s_b9d70b92a04830d4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_e94f100df88c903f = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     63, 144, 140, 248,  13,  16,  79, 233,
     10,   0,   0,   0,   1,   0,   1,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     78,   5,   0,   0, 124,   5,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  69, 118, 101, 110, 116,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102, 108,  97, 103, 115,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e94f100df88c903f = b_e94f100df88c903f.words;
#if !CAPNP_LITE
static const uint16_t m_e94f100df88c903f[] = {0};
static const uint16_t i_e94f100df88c903f[] = {0};
const ::capnp::_::RawSchema s_e94f100df88c903f = {
  0xe94f100df88c903f, b_e94f100df88c903f.words, 33, nullptr, m_e94f100df88c903f,
  0, 1, i_e94f100df88c903f, nullptr, nullptr, { &s_e94f100df88c903f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<54> b_9e8d607a2e670b2f = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     47,  11, 103,  46, 122,  96, 141, 158,
     10,   0,   0,   0,   1,   0,   1,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   5,   0,   0,   3,   6,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  66,  97, 116,  99, 104,  82,
    117, 110,  82, 101, 113, 117, 101, 115,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     59, 255, 250, 121,  60, 227, 249, 173,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9e8d607a2e670b2f = b_9e8d607a2e670b2f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9e8d607a2e670b2f[] = {
  &s_adf9e33c79faff3b,
};
static const uint16_t m_9e8d607a2e670b2f[] = {0, 1};
static const uint16_t i_9e8d607a2e670b2f[] = {0, 1};
const ::capnp::_::RawSchema s_9e8d607a2e670b2f = {
  0x9e8d607a2e670b2f, b_9e8d607a2e670b2f.words, 54, d_9e8d607a2e670b2f, m_9e8d607a2e670b2f,
  1, 2, i_9e8d607a2e670b2f, nullptr, nullptr, { &s_9e8d607a2e670b2f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_96a937bbb6901722 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     34,  23, 144, 182, 187,  55, 169, 150,
     10,   0,   0,   0,   1,   0,   0,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   6,   0,   0,  73,   6,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  66,  97, 116,  99, 104,  82,
    117, 110,  82, 101, 115, 112, 111, 110,
    115, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    237,  17, 209,  72, 140,  60,  70, 229,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_96a937bbb6901722 = b_96a937bbb6901722.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_96a937bbb6901722[] = {
  &s_e5463c8c48d111ed,
};
static const uint16_t m_96a937bbb6901722[] = {0};
static const uint16_t i_96a937bbb6901722[] = {0};
const ::capnp::_::RawSchema s_96a937bbb6901722 = {
  0x96a937bbb6901722, b_96a937bbb6901722.words, 39, d_96a937bbb6901722, m_96a937bbb6901722,
  1, 1, i_96a937bbb6901722, nullptr, nullptr, { &s_96a937bbb6901722, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_c0affd09a0dbcf8f = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    143, 207, 219, 160,   9, 253, 175, 192,
     10,   0,   0,   0,   1,   0,   1,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   6,   0,   0, 178,   6,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  77, 117, 108, 116, 105,  71,
    112, 117,  82, 101, 113, 117, 101, 115,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
    117, 117, 105, 100, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109,  97, 110, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 101,  97, 109,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c0affd09a0dbcf8f = b_c0affd09a0dbcf8f.words;
#if !CAPNP_LITE
static const uint16_t m_c0affd09a0dbcf8f[] = {1, 2, 0};
static const uint16_t i_c0affd09a0dbcf8f[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c0affd09a0dbcf8f = {
  0xc0affd09a0dbcf8f, b_c0affd09a0dbcf8f.words, 68, nullptr, m_c0affd09a0dbcf8f,
  0, 3, i_c0affd09a0dbcf8f, nullptr, nullptr, { &s_c0affd09a0dbcf8f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<235> b_d9de01a7301802e8 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    232,   2,  24,  48, 167,   1, 222, 217,
     10,   0,   0,   0,   3,   0,   0,   0,
    241, 179, 208, 208, 197, 228,  23, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    223,   6,   0,   0,  45,  12,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 199,   4,   0,   0,
    121,   3,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     76,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    158,  55,  83, 121,  37,  55,   2, 144,
     67, 212,  48,  80,  82, 171,  53, 218,
     81,   2,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   2,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    213,  85,  48, 222,  24, 153, 182, 129,
     18, 114,  41,  11, 132, 216, 212, 247,
     61,   2,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   2,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    250,  83, 129,  79,  94, 202, 237, 189,
     92, 239, 165,  70,  52, 222,  18, 162,
     41,   2,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   2,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    144,  91, 172, 153,  68, 153, 141, 159,
     11, 164, 132,   5, 106, 135,  66, 178,
     21,   2,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   2,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    255, 145,  18, 217, 140, 180, 153, 179,
    128, 104, 240, 114,  43, 173,  80, 150,
      1,   2,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    249,   1,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     86,  67,   4, 153, 151, 200, 200, 134,
    104,   4, 212, 190,  14, 132, 255, 157,
    237,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    229,   1,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
     59,  19,  57,  55,  91, 185, 196, 134,
     53,   8, 211, 193,  16,  89,  16, 194,
    217,   1,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   1,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
    113, 169, 224,  79,   4, 191,  64, 149,
     22, 149, 214, 136,  65,  48, 242, 252,
    197,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,   1,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
    216, 209,  51,   8, 236, 107,  19, 173,
      6,  59,  30, 122, 107, 210,   2, 180,
    177,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   1,   0,   0,   7,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
     27, 231, 214,  34, 168, 234, 248, 205,
     64, 192, 141, 218, 150, 122, 154, 173,
    157,   1,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   1,   0,   0,   7,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
     98, 193, 158, 229, 226, 126, 208, 167,
    204,  11,   7, 230, 123, 130,  84, 208,
    141,   1,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   1,   0,   0,   7,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
    143,  22,  44, 203, 178, 239,  27, 170,
     39, 233, 143, 246,  75,  68, 236, 237,
    125,   1,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   1,   0,   0,   7,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
     43, 184,  74, 172,  32, 215, 242, 208,
    212, 147, 188, 250, 152, 168, 171, 156,
    109,   1,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   1,   0,   0,   7,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
     10,  20, 109, 249, 136,  70, 161, 146,
     40,  41, 197, 219, 238,  69,  33, 189,
     93,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   1,   0,   0,   7,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
     84,  11,  94, 215, 176, 164, 109, 150,
     16, 139,  49, 117,  38, 211, 202, 191,
     73,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   1,   0,   0,   7,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    130,  84, 153, 251,  84, 167, 221, 185,
     90, 208,  66,  34,   6, 232, 190, 242,
     53,   1,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   1,   0,   0,   7,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105, 124, 161, 123, 121,  31, 167, 138,
      7,  34, 158,  32, 252,  49, 227, 189,
     37,   1,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   1,   0,   0,   7,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    237,  41, 252, 105,   0, 254,  31, 182,
    183, 157, 179,  89,   0,   2, 235, 180,
     17,   1,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   1,   0,   0,   7,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
    165, 126, 127,  86,  32, 144, 133, 214,
     27,  30,  41, 164, 138,  57, 198, 229,
      1,   1,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    253,   0,   0,   0,   7,   0,   0,   0,
    108, 105, 115, 116,  71, 112, 117, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  71, 112, 117,  83, 116,
     97, 116, 117, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97,  99, 113, 117, 105, 114, 101,  71,
    112, 117,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 108, 101,  97, 115, 101,  71,
    112, 117,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 117, 110,  67, 111, 109, 109,  97,
    110, 100,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 117, 100,  97,  73, 110, 105, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 117, 100,  97,  77, 101, 109,  65,
    108, 108, 111,  99,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 117, 100,  97,  77, 101, 109,  99,
    112, 121,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 117, 100,  97,  77, 101, 109,  70,
    114, 101, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 114, 101,  97, 116, 101,  67, 117,
    100,  97,  83, 116, 114, 101,  97, 109,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 101, 115, 116, 114, 111, 121,  67,
    117, 100,  97,  83, 116, 114, 101,  97,
    109,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 121, 110,  99, 104, 114, 111, 110,
    105, 122, 101,  67, 117, 100,  97,  83,
    116, 114, 101,  97, 109,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 117, 100,  97,  75, 101, 114, 110,
    101, 108,  76,  97, 117, 110,  99, 104,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 114, 101,  97, 116, 101,  69, 118,
    101, 110, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101,  99, 111, 114, 100,  69, 118,
    101, 110, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    101, 118, 101, 110, 116,  83, 121, 110,
     99, 104, 114, 111, 110, 105, 122, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 101, 115, 116, 114, 111, 121,  69,
    118, 101, 110, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     98,  97, 116,  99, 104,  75, 101, 114,
    110, 101, 108,  76,  97, 117, 110,  99,
    104,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 117, 108, 116, 105,  71, 112, 117,
     67, 111, 111, 112, 101, 114,  97, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d9de01a7301802e8 = b_d9de01a7301802e8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d9de01a7301802e8[] = {
  &s_81b69918de3055d5,
  &s_86c4b95b3739133b,
  &s_86c8c89799044356,
  &s_8aa71f797ba17c69,
  &s_900237257953379e,
  &s_92a14688f96d140a,
  &s_9540bf044fe0a971,
  &s_9650ad2b72f06880,
  &s_966da4b0d75e0b54,
  &s_9caba898fabc93d4,
  &s_9dff840ebed40468,
  &s_9f8d994499ac5b90,
  &s_a212de3446a5ef5c,
  &s_a7d07ee2e59ec162,
  &s_aa1befb2cb2c168f,
  &s_ad136bec0833d1d8,
  &s_ad9a7a96da8dc040,
  &s_b242876a0584a40b,
  &s_b399b48cd91291ff,
  &s_b402d26b7a1e3b06,
  &s_b4eb020059b39db7,
  &s_b61ffe0069fc29ed,
  &s_b9dda754fb995482,
  &s_bd2145eedbc52928,
  &s_bde331fc209e2207,
  &s_bdedca5e4f8153fa,
  &s_bfcad32675318b10,
  &s_c2105910c1d30835,
  &s_cdf8eaa822d6e71b,
  &s_d054827be6070bcc,
  &s_d0f2d720ac4ab82b,
  &s_d6859020567f7ea5,
  &s_da35ab525030d443,
  &s_e5c6398aa4291e1b,
  &s_edec444bf68fe927,
  &s_f2bee8062242d05a,
  &s_f7d4d8840b297212,
  &s_fcf2304188d69516,
};
static const uint16_t m_d9de01a7301802e8[] = {2, 17, 9, 13, 5, 12, 6, 8, 7, 10, 16, 15, 1, 0, 18, 14, 3, 4, 11};
const ::capnp::_::RawSchema s_d9de01a7301802e8 = {
  0xd9de01a7301802e8, b_d9de01a7301802e8.words, 235, d_d9de01a7301802e8, m_d9de01a7301802e8,
  38, 19, nullptr, nullptr, nullptr, { &s_d9de01a7301802e8, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_900237257953379e = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    158,  55,  83, 121,  37,  55,   2, 144,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 108, 105, 115,
    116,  71, 112, 117, 115,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_900237257953379e = b_900237257953379e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_900237257953379e = {
  0x900237257953379e, b_900237257953379e.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_900237257953379e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_da35ab525030d443 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     67, 212,  48,  80,  82, 171,  53, 218,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 108, 105, 115,
    116,  71, 112, 117, 115,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    103, 112, 117, 115,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      4,  70,  13, 172, 223, 145, 123, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_da35ab525030d443 = b_da35ab525030d443.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_da35ab525030d443[] = {
  &s_c77b91dfac0d4604,
};
static const uint16_t m_da35ab525030d443[] = {0};
static const uint16_t i_da35ab525030d443[] = {0};
const ::capnp::_::RawSchema s_da35ab525030d443 = {
  0xda35ab525030d443, b_da35ab525030d443.words, 34, d_da35ab525030d443, m_da35ab525030d443,
  1, 1, i_da35ab525030d443, nullptr, nullptr, { &s_da35ab525030d443, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_81b69918de3055d5 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    213,  85,  48, 222,  24, 153, 182, 129,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 103, 101, 116,
     71, 112, 117,  83, 116,  97, 116, 117,
    115,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     15, 141,  82,  45, 175, 226,  62, 169,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_81b69918de3055d5 = b_81b69918de3055d5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_81b69918de3055d5[] = {
  &s_a93ee2af2d528d0f,
};
static const uint16_t m_81b69918de3055d5[] = {0};
static const uint16_t i_81b69918de3055d5[] = {0};
const ::capnp::_::RawSchema s_81b69918de3055d5 = {
  0x81b69918de3055d5, b_81b69918de3055d5.words, 35, d_81b69918de3055d5, m_81b69918de3055d5,
  1, 1, i_81b69918de3055d5, nullptr, nullptr, { &s_81b69918de3055d5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_f7d4d8840b297212 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     18, 114,  41,  11, 132, 216, 212, 247,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 103, 101, 116,
     71, 112, 117,  83, 116,  97, 116, 117,
    115,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 116,  97, 116, 117, 115,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    199, 196, 133, 248, 237,  52, 150, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f7d4d8840b297212 = b_f7d4d8840b297212.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f7d4d8840b297212[] = {
  &s_fd9634edf885c4c7,
};
static const uint16_t m_f7d4d8840b297212[] = {0};
static const uint16_t i_f7d4d8840b297212[] = {0};
const ::capnp::_::RawSchema s_f7d4d8840b297212 = {
  0xf7d4d8840b297212, b_f7d4d8840b297212.words, 35, d_f7d4d8840b297212, m_f7d4d8840b297212,
  1, 1, i_f7d4d8840b297212, nullptr, nullptr, { &s_f7d4d8840b297212, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_bdedca5e4f8153fa = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    250,  83, 129,  79,  94, 202, 237, 189,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  97,  99, 113,
    117, 105, 114, 101,  71, 112, 117,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     15, 141,  82,  45, 175, 226,  62, 169,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bdedca5e4f8153fa = b_bdedca5e4f8153fa.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bdedca5e4f8153fa[] = {
  &s_a93ee2af2d528d0f,
};
static const uint16_t m_bdedca5e4f8153fa[] = {0};
static const uint16_t i_bdedca5e4f8153fa[] = {0};
const ::capnp::_::RawSchema s_bdedca5e4f8153fa = {
  0xbdedca5e4f8153fa, b_bdedca5e4f8153fa.words, 34, d_bdedca5e4f8153fa, m_bdedca5e4f8153fa,
  1, 1, i_bdedca5e4f8153fa, nullptr, nullptr, { &s_bdedca5e4f8153fa, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a212de3446a5ef5c = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     92, 239, 165,  70,  52, 222,  18, 162,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  97,  99, 113,
    117, 105, 114, 101,  71, 112, 117,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105,  36,   6,  20, 123,  34,  25, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a212de3446a5ef5c = b_a212de3446a5ef5c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a212de3446a5ef5c[] = {
  &s_8919227b14062469,
};
static const uint16_t m_a212de3446a5ef5c[] = {0};
static const uint16_t i_a212de3446a5ef5c[] = {0};
const ::capnp::_::RawSchema s_a212de3446a5ef5c = {
  0xa212de3446a5ef5c, b_a212de3446a5ef5c.words, 34, d_a212de3446a5ef5c, m_a212de3446a5ef5c,
  1, 1, i_a212de3446a5ef5c, nullptr, nullptr, { &s_a212de3446a5ef5c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9f8d994499ac5b90 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    144,  91, 172, 153,  68, 153, 141, 159,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 114, 101, 108,
    101,  97, 115, 101,  71, 112, 117,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     15, 141,  82,  45, 175, 226,  62, 169,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9f8d994499ac5b90 = b_9f8d994499ac5b90.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9f8d994499ac5b90[] = {
  &s_a93ee2af2d528d0f,
};
static const uint16_t m_9f8d994499ac5b90[] = {0};
static const uint16_t i_9f8d994499ac5b90[] = {0};
const ::capnp::_::RawSchema s_9f8d994499ac5b90 = {
  0x9f8d994499ac5b90, b_9f8d994499ac5b90.words, 34, d_9f8d994499ac5b90, m_9f8d994499ac5b90,
  1, 1, i_9f8d994499ac5b90, nullptr, nullptr, { &s_9f8d994499ac5b90, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b242876a0584a40b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     11, 164, 132,   5, 106, 135,  66, 178,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 114, 101, 108,
    101,  97, 115, 101,  71, 112, 117,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105,  36,   6,  20, 123,  34,  25, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b242876a0584a40b = b_b242876a0584a40b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b242876a0584a40b[] = {
  &s_8919227b14062469,
};
static const uint16_t m_b242876a0584a40b[] = {0};
static const uint16_t i_b242876a0584a40b[] = {0};
const ::capnp::_::RawSchema s_b242876a0584a40b = {
  0xb242876a0584a40b, b_b242876a0584a40b.words, 34, d_b242876a0584a40b, m_b242876a0584a40b,
  1, 1, i_b242876a0584a40b, nullptr, nullptr, { &s_b242876a0584a40b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b399b48cd91291ff = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    255, 145,  18, 217, 140, 180, 153, 179,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 114, 117, 110,
     67, 111, 109, 109,  97, 110, 100,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     59, 255, 250, 121,  60, 227, 249, 173,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b399b48cd91291ff = b_b399b48cd91291ff.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b399b48cd91291ff[] = {
  &s_adf9e33c79faff3b,
};
static const uint16_t m_b399b48cd91291ff[] = {0};
static const uint16_t i_b399b48cd91291ff[] = {0};
const ::capnp::_::RawSchema s_b399b48cd91291ff = {
  0xb399b48cd91291ff, b_b399b48cd91291ff.words, 34, d_b399b48cd91291ff, m_b399b48cd91291ff,
  1, 1, i_b399b48cd91291ff, nullptr, nullptr, { &s_b399b48cd91291ff, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_9650ad2b72f06880 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    128, 104, 240, 114,  43, 173,  80, 150,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 114, 117, 110,
     67, 111, 109, 109,  97, 110, 100,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    237,  17, 209,  72, 140,  60,  70, 229,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9650ad2b72f06880 = b_9650ad2b72f06880.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9650ad2b72f06880[] = {
  &s_e5463c8c48d111ed,
};
static const uint16_t m_9650ad2b72f06880[] = {0};
static const uint16_t i_9650ad2b72f06880[] = {0};
const ::capnp::_::RawSchema s_9650ad2b72f06880 = {
  0x9650ad2b72f06880, b_9650ad2b72f06880.words, 35, d_9650ad2b72f06880, m_9650ad2b72f06880,
  1, 1, i_9650ad2b72f06880, nullptr, nullptr, { &s_9650ad2b72f06880, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_86c8c89799044356 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     86,  67,   4, 153, 151, 200, 200, 134,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 117, 100,
     97,  73, 110, 105, 116,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_86c8c89799044356 = b_86c8c89799044356.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_86c8c89799044356 = {
  0x86c8c89799044356, b_86c8c89799044356.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_86c8c89799044356, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9dff840ebed40468 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    104,   4, 212, 190,  14, 132, 255, 157,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 117, 100,
     97,  73, 110, 105, 116,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105,  36,   6,  20, 123,  34,  25, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9dff840ebed40468 = b_9dff840ebed40468.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9dff840ebed40468[] = {
  &s_8919227b14062469,
};
static const uint16_t m_9dff840ebed40468[] = {0};
static const uint16_t i_9dff840ebed40468[] = {0};
const ::capnp::_::RawSchema s_9dff840ebed40468 = {
  0x9dff840ebed40468, b_9dff840ebed40468.words, 34, d_9dff840ebed40468, m_9dff840ebed40468,
  1, 1, i_9dff840ebed40468, nullptr, nullptr, { &s_9dff840ebed40468, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_86c4b95b3739133b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     59,  19,  57,  55,  91, 185, 196, 134,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 117, 100,
     97,  77, 101, 109,  65, 108, 108, 111,
     99,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     52,  67,  23, 225, 116, 191, 233, 226,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_86c4b95b3739133b = b_86c4b95b3739133b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_86c4b95b3739133b[] = {
  &s_e2e9bf74e1174334,
};
static const uint16_t m_86c4b95b3739133b[] = {0};
static const uint16_t i_86c4b95b3739133b[] = {0};
const ::capnp::_::RawSchema s_86c4b95b3739133b = {
  0x86c4b95b3739133b, b_86c4b95b3739133b.words, 35, d_86c4b95b3739133b, m_86c4b95b3739133b,
  1, 1, i_86c4b95b3739133b, nullptr, nullptr, { &s_86c4b95b3739133b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_c2105910c1d30835 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     53,   8, 211, 193,  16,  89,  16, 194,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 117, 100,
     97,  77, 101, 109,  65, 108, 108, 111,
     99,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     52,  67,  23, 225, 116, 191, 233, 226,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c2105910c1d30835 = b_c2105910c1d30835.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c2105910c1d30835[] = {
  &s_e2e9bf74e1174334,
};
static const uint16_t m_c2105910c1d30835[] = {0};
static const uint16_t i_c2105910c1d30835[] = {0};
const ::capnp::_::RawSchema s_c2105910c1d30835 = {
  0xc2105910c1d30835, b_c2105910c1d30835.words, 35, d_c2105910c1d30835, m_c2105910c1d30835,
  1, 1, i_c2105910c1d30835, nullptr, nullptr, { &s_c2105910c1d30835, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9540bf044fe0a971 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    113, 169, 224,  79,   4, 191,  64, 149,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 117, 100,
     97,  77, 101, 109,  99, 112, 121,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    116, 232,  28, 161, 215,  89,  18, 201,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9540bf044fe0a971 = b_9540bf044fe0a971.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9540bf044fe0a971[] = {
  &s_c91259d7a11ce874,
};
static const uint16_t m_9540bf044fe0a971[] = {0};
static const uint16_t i_9540bf044fe0a971[] = {0};
const ::capnp::_::RawSchema s_9540bf044fe0a971 = {
  0x9540bf044fe0a971, b_9540bf044fe0a971.words, 34, d_9540bf044fe0a971, m_9540bf044fe0a971,
  1, 1, i_9540bf044fe0a971, nullptr, nullptr, { &s_9540bf044fe0a971, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_fcf2304188d69516 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     22, 149, 214, 136,  65,  48, 242, 252,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 117, 100,
     97,  77, 101, 109,  99, 112, 121,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105,  36,   6,  20, 123,  34,  25, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fcf2304188d69516 = b_fcf2304188d69516.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fcf2304188d69516[] = {
  &s_8919227b14062469,
};
static const uint16_t m_fcf2304188d69516[] = {0};
static const uint16_t i_fcf2304188d69516[] = {0};
const ::capnp::_::RawSchema s_fcf2304188d69516 = {
  0xfcf2304188d69516, b_fcf2304188d69516.words, 34, d_fcf2304188d69516, m_fcf2304188d69516,
  1, 1, i_fcf2304188d69516, nullptr, nullptr, { &s_fcf2304188d69516, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_ad136bec0833d1d8 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    216, 209,  51,   8, 236, 107,  19, 173,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 117, 100,
     97,  77, 101, 109,  70, 114, 101, 101,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     52,  67,  23, 225, 116, 191, 233, 226,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ad136bec0833d1d8 = b_ad136bec0833d1d8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ad136bec0833d1d8[] = {
  &s_e2e9bf74e1174334,
};
static const uint16_t m_ad136bec0833d1d8[] = {0};
static const uint16_t i_ad136bec0833d1d8[] = {0};
const ::capnp::_::RawSchema s_ad136bec0833d1d8 = {
  0xad136bec0833d1d8, b_ad136bec0833d1d8.words, 34, d_ad136bec0833d1d8, m_ad136bec0833d1d8,
  1, 1, i_ad136bec0833d1d8, nullptr, nullptr, { &s_ad136bec0833d1d8, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b402d26b7a1e3b06 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
      6,  59,  30, 122, 107, 210,   2, 180,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 117, 100,
     97,  77, 101, 109,  70, 114, 101, 101,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105,  36,   6,  20, 123,  34,  25, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b402d26b7a1e3b06 = b_b402d26b7a1e3b06.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b402d26b7a1e3b06[] = {
  &s_8919227b14062469,
};
static const uint16_t m_b402d26b7a1e3b06[] = {0};
static const uint16_t i_b402d26b7a1e3b06[] = {0};
const ::capnp::_::RawSchema s_b402d26b7a1e3b06 = {
  0xb402d26b7a1e3b06, b_b402d26b7a1e3b06.words, 35, d_b402d26b7a1e3b06, m_b402d26b7a1e3b06,
  1, 1, i_b402d26b7a1e3b06, nullptr, nullptr, { &s_b402d26b7a1e3b06, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_cdf8eaa822d6e71b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     27, 231, 214,  34, 168, 234, 248, 205,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 114, 101,
     97, 116, 101,  67, 117, 100,  97,  83,
    116, 114, 101,  97, 109,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    212,  48,  72, 160, 146,  11, 215, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cdf8eaa822d6e71b = b_cdf8eaa822d6e71b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cdf8eaa822d6e71b[] = {
  &s_b9d70b92a04830d4,
};
static const uint16_t m_cdf8eaa822d6e71b[] = {0};
static const uint16_t i_cdf8eaa822d6e71b[] = {0};
const ::capnp::_::RawSchema s_cdf8eaa822d6e71b = {
  0xcdf8eaa822d6e71b, b_cdf8eaa822d6e71b.words, 35, d_cdf8eaa822d6e71b, m_cdf8eaa822d6e71b,
  1, 1, i_cdf8eaa822d6e71b, nullptr, nullptr, { &s_cdf8eaa822d6e71b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_ad9a7a96da8dc040 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     64, 192, 141, 218, 150, 122, 154, 173,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 114, 101,
     97, 116, 101,  67, 117, 100,  97,  83,
    116, 114, 101,  97, 109,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      1,  13,  49,  24,  11,   5,  45, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ad9a7a96da8dc040 = b_ad9a7a96da8dc040.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ad9a7a96da8dc040[] = {
  &s_922d050b18310d01,
};
static const uint16_t m_ad9a7a96da8dc040[] = {0};
static const uint16_t i_ad9a7a96da8dc040[] = {0};
const ::capnp::_::RawSchema s_ad9a7a96da8dc040 = {
  0xad9a7a96da8dc040, b_ad9a7a96da8dc040.words, 35, d_ad9a7a96da8dc040, m_ad9a7a96da8dc040,
  1, 1, i_ad9a7a96da8dc040, nullptr, nullptr, { &s_ad9a7a96da8dc040, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_a7d07ee2e59ec162 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     98, 193, 158, 229, 226, 126, 208, 167,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 100, 101, 115,
    116, 114, 111, 121,  67, 117, 100,  97,
     83, 116, 114, 101,  97, 109,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      1,  13,  49,  24,  11,   5,  45, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a7d07ee2e59ec162 = b_a7d07ee2e59ec162.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a7d07ee2e59ec162[] = {
  &s_922d050b18310d01,
};
static const uint16_t m_a7d07ee2e59ec162[] = {0};
static const uint16_t i_a7d07ee2e59ec162[] = {0};
const ::capnp::_::RawSchema s_a7d07ee2e59ec162 = {
  0xa7d07ee2e59ec162, b_a7d07ee2e59ec162.words, 35, d_a7d07ee2e59ec162, m_a7d07ee2e59ec162,
  1, 1, i_a7d07ee2e59ec162, nullptr, nullptr, { &s_a7d07ee2e59ec162, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_d054827be6070bcc = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    204,  11,   7, 230, 123, 130,  84, 208,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 100, 101, 115,
    116, 114, 111, 121,  67, 117, 100,  97,
     83, 116, 114, 101,  97, 109,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105,  36,   6,  20, 123,  34,  25, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d054827be6070bcc = b_d054827be6070bcc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d054827be6070bcc[] = {
  &s_8919227b14062469,
};
static const uint16_t m_d054827be6070bcc[] = {0};
static const uint16_t i_d054827be6070bcc[] = {0};
const ::capnp::_::RawSchema s_d054827be6070bcc = {
  0xd054827be6070bcc, b_d054827be6070bcc.words, 35, d_d054827be6070bcc, m_d054827be6070bcc,
  1, 1, i_d054827be6070bcc, nullptr, nullptr, { &s_d054827be6070bcc, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_aa1befb2cb2c168f = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    143,  22,  44, 203, 178, 239,  27, 170,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 115, 121, 110,
     99, 104, 114, 111, 110, 105, 122, 101,
     67, 117, 100,  97,  83, 116, 114, 101,
     97, 109,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      1,  13,  49,  24,  11,   5,  45, 146,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_aa1befb2cb2c168f = b_aa1befb2cb2c168f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_aa1befb2cb2c168f[] = {
  &s_922d050b18310d01,
};
static const uint16_t m_aa1befb2cb2c168f[] = {0};
static const uint16_t i_aa1befb2cb2c168f[] = {0};
const ::capnp::_::RawSchema s_aa1befb2cb2c168f = {
  0xaa1befb2cb2c168f, b_aa1befb2cb2c168f.words, 36, d_aa1befb2cb2c168f, m_aa1befb2cb2c168f,
  1, 1, i_aa1befb2cb2c168f, nullptr, nullptr, { &s_aa1befb2cb2c168f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_edec444bf68fe927 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     39, 233, 143, 246,  75,  68, 236, 237,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 115, 121, 110,
     99, 104, 114, 111, 110, 105, 122, 101,
     67, 117, 100,  97,  83, 116, 114, 101,
     97, 109,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105,  36,   6,  20, 123,  34,  25, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_edec444bf68fe927 = b_edec444bf68fe927.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_edec444bf68fe927[] = {
  &s_8919227b14062469,
};
static const uint16_t m_edec444bf68fe927[] = {0};
static const uint16_t i_edec444bf68fe927[] = {0};
const ::capnp::_::RawSchema s_edec444bf68fe927 = {
  0xedec444bf68fe927, b_edec444bf68fe927.words, 36, d_edec444bf68fe927, m_edec444bf68fe927,
  1, 1, i_edec444bf68fe927, nullptr, nullptr, { &s_edec444bf68fe927, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_d0f2d720ac4ab82b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     43, 184,  74, 172,  32, 215, 242, 208,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 117, 100,
     97,  75, 101, 114, 110, 101, 108,  76,
     97, 117, 110,  99, 104,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     59, 255, 250, 121,  60, 227, 249, 173,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d0f2d720ac4ab82b = b_d0f2d720ac4ab82b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d0f2d720ac4ab82b[] = {
  &s_adf9e33c79faff3b,
};
static const uint16_t m_d0f2d720ac4ab82b[] = {0};
static const uint16_t i_d0f2d720ac4ab82b[] = {0};
const ::capnp::_::RawSchema s_d0f2d720ac4ab82b = {
  0xd0f2d720ac4ab82b, b_d0f2d720ac4ab82b.words, 35, d_d0f2d720ac4ab82b, m_d0f2d720ac4ab82b,
  1, 1, i_d0f2d720ac4ab82b, nullptr, nullptr, { &s_d0f2d720ac4ab82b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_9caba898fabc93d4 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    212, 147, 188, 250, 152, 168, 171, 156,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 117, 100,
     97,  75, 101, 114, 110, 101, 108,  76,
     97, 117, 110,  99, 104,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    237,  17, 209,  72, 140,  60,  70, 229,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9caba898fabc93d4 = b_9caba898fabc93d4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9caba898fabc93d4[] = {
  &s_e5463c8c48d111ed,
};
static const uint16_t m_9caba898fabc93d4[] = {0};
static const uint16_t i_9caba898fabc93d4[] = {0};
const ::capnp::_::RawSchema s_9caba898fabc93d4 = {
  0x9caba898fabc93d4, b_9caba898fabc93d4.words, 36, d_9caba898fabc93d4, m_9caba898fabc93d4,
  1, 1, i_9caba898fabc93d4, nullptr, nullptr, { &s_9caba898fabc93d4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_92a14688f96d140a = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     10,  20, 109, 249, 136,  70, 161, 146,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 114, 101,
     97, 116, 101,  69, 118, 101, 110, 116,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     63, 144, 140, 248,  13,  16,  79, 233,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_92a14688f96d140a = b_92a14688f96d140a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_92a14688f96d140a[] = {
  &s_e94f100df88c903f,
};
static const uint16_t m_92a14688f96d140a[] = {0};
static const uint16_t i_92a14688f96d140a[] = {0};
const ::capnp::_::RawSchema s_92a14688f96d140a = {
  0x92a14688f96d140a, b_92a14688f96d140a.words, 34, d_92a14688f96d140a, m_92a14688f96d140a,
  1, 1, i_92a14688f96d140a, nullptr, nullptr, { &s_92a14688f96d140a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_bd2145eedbc52928 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     40,  41, 197, 219, 238,  69,  33, 189,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  99, 114, 101,
     97, 116, 101,  69, 118, 101, 110, 116,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    197,  49,   4, 237,  30, 159,  43, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bd2145eedbc52928 = b_bd2145eedbc52928.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bd2145eedbc52928[] = {
  &s_ff2b9f1eed0431c5,
};
static const uint16_t m_bd2145eedbc52928[] = {0};
static const uint16_t i_bd2145eedbc52928[] = {0};
const ::capnp::_::RawSchema s_bd2145eedbc52928 = {
  0xbd2145eedbc52928, b_bd2145eedbc52928.words, 35, d_bd2145eedbc52928, m_bd2145eedbc52928,
  1, 1, i_bd2145eedbc52928, nullptr, nullptr, { &s_bd2145eedbc52928, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_966da4b0d75e0b54 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     84,  11,  94, 215, 176, 164, 109, 150,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 114, 101,  99,
    111, 114, 100,  69, 118, 101, 110, 116,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    197,  49,   4, 237,  30, 159,  43, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_966da4b0d75e0b54 = b_966da4b0d75e0b54.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_966da4b0d75e0b54[] = {
  &s_ff2b9f1eed0431c5,
};
static const uint16_t m_966da4b0d75e0b54[] = {0};
static const uint16_t i_966da4b0d75e0b54[] = {0};
const ::capnp::_::RawSchema s_966da4b0d75e0b54 = {
  0x966da4b0d75e0b54, b_966da4b0d75e0b54.words, 34, d_966da4b0d75e0b54, m_966da4b0d75e0b54,
  1, 1, i_966da4b0d75e0b54, nullptr, nullptr, { &s_966da4b0d75e0b54, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_bfcad32675318b10 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     16, 139,  49, 117,  38, 211, 202, 191,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 114, 101,  99,
    111, 114, 100,  69, 118, 101, 110, 116,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105,  36,   6,  20, 123,  34,  25, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bfcad32675318b10 = b_bfcad32675318b10.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bfcad32675318b10[] = {
  &s_8919227b14062469,
};
static const uint16_t m_bfcad32675318b10[] = {0};
static const uint16_t i_bfcad32675318b10[] = {0};
const ::capnp::_::RawSchema s_bfcad32675318b10 = {
  0xbfcad32675318b10, b_bfcad32675318b10.words, 35, d_bfcad32675318b10, m_bfcad32675318b10,
  1, 1, i_bfcad32675318b10, nullptr, nullptr, { &s_bfcad32675318b10, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b9dda754fb995482 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    130,  84, 153, 251,  84, 167, 221, 185,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 101, 118, 101,
    110, 116,  83, 121, 110,  99, 104, 114,
    111, 110, 105, 122, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    197,  49,   4, 237,  30, 159,  43, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9dda754fb995482 = b_b9dda754fb995482.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b9dda754fb995482[] = {
  &s_ff2b9f1eed0431c5,
};
static const uint16_t m_b9dda754fb995482[] = {0};
static const uint16_t i_b9dda754fb995482[] = {0};
const ::capnp::_::RawSchema s_b9dda754fb995482 = {
  0xb9dda754fb995482, b_b9dda754fb995482.words, 35, d_b9dda754fb995482, m_b9dda754fb995482,
  1, 1, i_b9dda754fb995482, nullptr, nullptr, { &s_b9dda754fb995482, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_f2bee8062242d05a = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     90, 208,  66,  34,   6, 232, 190, 242,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 101, 118, 101,
    110, 116,  83, 121, 110,  99, 104, 114,
    111, 110, 105, 122, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105,  36,   6,  20, 123,  34,  25, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f2bee8062242d05a = b_f2bee8062242d05a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f2bee8062242d05a[] = {
  &s_8919227b14062469,
};
static const uint16_t m_f2bee8062242d05a[] = {0};
static const uint16_t i_f2bee8062242d05a[] = {0};
const ::capnp::_::RawSchema s_f2bee8062242d05a = {
  0xf2bee8062242d05a, b_f2bee8062242d05a.words, 35, d_f2bee8062242d05a, m_f2bee8062242d05a,
  1, 1, i_f2bee8062242d05a, nullptr, nullptr, { &s_f2bee8062242d05a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8aa71f797ba17c69 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    105, 124, 161, 123, 121,  31, 167, 138,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 100, 101, 115,
    116, 114, 111, 121,  69, 118, 101, 110,
    116,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104,  97, 110, 100, 108, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    197,  49,   4, 237,  30, 159,  43, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8aa71f797ba17c69 = b_8aa71f797ba17c69.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8aa71f797ba17c69[] = {
  &s_ff2b9f1eed0431c5,
};
static const uint16_t m_8aa71f797ba17c69[] = {0};
static const uint16_t i_8aa71f797ba17c69[] = {0};
const ::capnp::_::RawSchema s_8aa71f797ba17c69 = {
  0x8aa71f797ba17c69, b_8aa71f797ba17c69.words, 35, d_8aa71f797ba17c69, m_8aa71f797ba17c69,
  1, 1, i_8aa71f797ba17c69, nullptr, nullptr, { &s_8aa71f797ba17c69, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_bde331fc209e2207 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
      7,  34, 158,  32, 252,  49, 227, 189,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 100, 101, 115,
    116, 114, 111, 121,  69, 118, 101, 110,
    116,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105,  36,   6,  20, 123,  34,  25, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bde331fc209e2207 = b_bde331fc209e2207.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bde331fc209e2207[] = {
  &s_8919227b14062469,
};
static const uint16_t m_bde331fc209e2207[] = {0};
static const uint16_t i_bde331fc209e2207[] = {0};
const ::capnp::_::RawSchema s_bde331fc209e2207 = {
  0xbde331fc209e2207, b_bde331fc209e2207.words, 35, d_bde331fc209e2207, m_bde331fc209e2207,
  1, 1, i_bde331fc209e2207, nullptr, nullptr, { &s_bde331fc209e2207, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b61ffe0069fc29ed = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    237,  41, 252, 105,   0, 254,  31, 182,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  98,  97, 116,
     99, 104,  75, 101, 114, 110, 101, 108,
     76,  97, 117, 110,  99, 104,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     47,  11, 103,  46, 122,  96, 141, 158,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b61ffe0069fc29ed = b_b61ffe0069fc29ed.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b61ffe0069fc29ed[] = {
  &s_9e8d607a2e670b2f,
};
static const uint16_t m_b61ffe0069fc29ed[] = {0};
static const uint16_t i_b61ffe0069fc29ed[] = {0};
const ::capnp::_::RawSchema s_b61ffe0069fc29ed = {
  0xb61ffe0069fc29ed, b_b61ffe0069fc29ed.words, 35, d_b61ffe0069fc29ed, m_b61ffe0069fc29ed,
  1, 1, i_b61ffe0069fc29ed, nullptr, nullptr, { &s_b61ffe0069fc29ed, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_b4eb020059b39db7 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    183, 157, 179,  89,   0,   2, 235, 180,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46,  98,  97, 116,
     99, 104,  75, 101, 114, 110, 101, 108,
     76,  97, 117, 110,  99, 104,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 112, 111, 110, 115, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     34,  23, 144, 182, 187,  55, 169, 150,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b4eb020059b39db7 = b_b4eb020059b39db7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b4eb020059b39db7[] = {
  &s_96a937bbb6901722,
};
static const uint16_t m_b4eb020059b39db7[] = {0};
static const uint16_t i_b4eb020059b39db7[] = {0};
const ::capnp::_::RawSchema s_b4eb020059b39db7 = {
  0xb4eb020059b39db7, b_b4eb020059b39db7.words, 36, d_b4eb020059b39db7, m_b4eb020059b39db7,
  1, 1, i_b4eb020059b39db7, nullptr, nullptr, { &s_b4eb020059b39db7, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_d6859020567f7ea5 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    165, 126, 127,  86,  32, 144, 133, 214,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 109, 117, 108,
    116, 105,  71, 112, 117,  67, 111, 111,
    112, 101, 114,  97, 116, 105, 111, 110,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113, 117, 101, 115, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    143, 207, 219, 160,   9, 253, 175, 192,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d6859020567f7ea5 = b_d6859020567f7ea5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d6859020567f7ea5[] = {
  &s_c0affd09a0dbcf8f,
};
static const uint16_t m_d6859020567f7ea5[] = {0};
static const uint16_t i_d6859020567f7ea5[] = {0};
const ::capnp::_::RawSchema s_d6859020567f7ea5 = {
  0xd6859020567f7ea5, b_d6859020567f7ea5.words, 35, d_d6859020567f7ea5, m_d6859020567f7ea5,
  1, 1, i_d6859020567f7ea5, nullptr, nullptr, { &s_d6859020567f7ea5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_e5c6398aa4291e1b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     27,  30,  41, 164, 138,  57, 198, 229,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 112, 117,  46,  99,  97, 112, 110,
    112,  58,  71, 112, 117,  83, 101, 114,
    118, 105,  99, 101,  46, 109, 117, 108,
    116, 105,  71, 112, 117,  67, 111, 111,
    112, 101, 114,  97, 116, 105, 111, 110,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97,  99, 107,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    105,  36,   6,  20, 123,  34,  25, 137,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e5c6398aa4291e1b = b_e5c6398aa4291e1b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e5c6398aa4291e1b[] = {
  &s_8919227b14062469,
};
static const uint16_t m_e5c6398aa4291e1b[] = {0};
static const uint16_t i_e5c6398aa4291e1b[] = {0};
const ::capnp::_::RawSchema s_e5c6398aa4291e1b = {
  0xe5c6398aa4291e1b, b_e5c6398aa4291e1b.words, 36, d_e5c6398aa4291e1b, m_e5c6398aa4291e1b,
  1, 1, i_e5c6398aa4291e1b, nullptr, nullptr, { &s_e5c6398aa4291e1b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// Void
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Void::_capnpPrivate::dataWordSize;
constexpr uint16_t Void::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Void::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Void::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuList
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuList::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuList::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuList::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuList::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuRequest
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuRequest::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuRequest::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuStatus
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuStatus::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuStatus::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuStatus::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuStatus::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Ack
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Ack::_capnpPrivate::dataWordSize;
constexpr uint16_t Ack::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Ack::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Ack::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RunRequest
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RunRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t RunRequest::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RunRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RunRequest::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// RunResponse
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t RunResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t RunResponse::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind RunResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RunResponse::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MemcpyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MemcpyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t MemcpyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MemcpyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MemcpyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// CudaMemInfo
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t CudaMemInfo::_capnpPrivate::dataWordSize;
constexpr uint16_t CudaMemInfo::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind CudaMemInfo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CudaMemInfo::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// StreamHandle
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t StreamHandle::_capnpPrivate::dataWordSize;
constexpr uint16_t StreamHandle::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind StreamHandle::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StreamHandle::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// EventHandle
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t EventHandle::_capnpPrivate::dataWordSize;
constexpr uint16_t EventHandle::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind EventHandle::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EventHandle::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// StreamCreateParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t StreamCreateParams::_capnpPrivate::dataWordSize;
constexpr uint16_t StreamCreateParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind StreamCreateParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StreamCreateParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// EventParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t EventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t EventParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind EventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EventParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BatchRunRequest
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BatchRunRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t BatchRunRequest::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BatchRunRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BatchRunRequest::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// BatchRunResponse
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t BatchRunResponse::_capnpPrivate::dataWordSize;
constexpr uint16_t BatchRunResponse::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind BatchRunResponse::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BatchRunResponse::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MultiGpuRequest
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MultiGpuRequest::_capnpPrivate::dataWordSize;
constexpr uint16_t MultiGpuRequest::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MultiGpuRequest::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MultiGpuRequest::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::GpuService::ListGpusParams,  ::GpuService::ListGpusResults>
GpuService::Client::listGpusRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::ListGpusParams,  ::GpuService::ListGpusResults>(
      0xd9de01a7301802e8ull, 0, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::listGpus(ListGpusContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "listGpus",
      0xd9de01a7301802e8ull, 0);
}
::capnp::Request< ::GpuService::GetGpuStatusParams,  ::GpuService::GetGpuStatusResults>
GpuService::Client::getGpuStatusRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::GetGpuStatusParams,  ::GpuService::GetGpuStatusResults>(
      0xd9de01a7301802e8ull, 1, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::getGpuStatus(GetGpuStatusContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "getGpuStatus",
      0xd9de01a7301802e8ull, 1);
}
::capnp::Request< ::GpuService::AcquireGpuParams,  ::GpuService::AcquireGpuResults>
GpuService::Client::acquireGpuRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::AcquireGpuParams,  ::GpuService::AcquireGpuResults>(
      0xd9de01a7301802e8ull, 2, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::acquireGpu(AcquireGpuContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "acquireGpu",
      0xd9de01a7301802e8ull, 2);
}
::capnp::Request< ::GpuService::ReleaseGpuParams,  ::GpuService::ReleaseGpuResults>
GpuService::Client::releaseGpuRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::ReleaseGpuParams,  ::GpuService::ReleaseGpuResults>(
      0xd9de01a7301802e8ull, 3, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::releaseGpu(ReleaseGpuContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "releaseGpu",
      0xd9de01a7301802e8ull, 3);
}
::capnp::Request< ::GpuService::RunCommandParams,  ::GpuService::RunCommandResults>
GpuService::Client::runCommandRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::RunCommandParams,  ::GpuService::RunCommandResults>(
      0xd9de01a7301802e8ull, 4, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::runCommand(RunCommandContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "runCommand",
      0xd9de01a7301802e8ull, 4);
}
::capnp::Request< ::GpuService::CudaInitParams,  ::GpuService::CudaInitResults>
GpuService::Client::cudaInitRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::CudaInitParams,  ::GpuService::CudaInitResults>(
      0xd9de01a7301802e8ull, 5, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::cudaInit(CudaInitContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "cudaInit",
      0xd9de01a7301802e8ull, 5);
}
::capnp::Request< ::GpuService::CudaMemAllocParams,  ::GpuService::CudaMemAllocResults>
GpuService::Client::cudaMemAllocRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::CudaMemAllocParams,  ::GpuService::CudaMemAllocResults>(
      0xd9de01a7301802e8ull, 6, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::cudaMemAlloc(CudaMemAllocContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "cudaMemAlloc",
      0xd9de01a7301802e8ull, 6);
}
::capnp::Request< ::GpuService::CudaMemcpyParams,  ::GpuService::CudaMemcpyResults>
GpuService::Client::cudaMemcpyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::CudaMemcpyParams,  ::GpuService::CudaMemcpyResults>(
      0xd9de01a7301802e8ull, 7, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::cudaMemcpy(CudaMemcpyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "cudaMemcpy",
      0xd9de01a7301802e8ull, 7);
}
::capnp::Request< ::GpuService::CudaMemFreeParams,  ::GpuService::CudaMemFreeResults>
GpuService::Client::cudaMemFreeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::CudaMemFreeParams,  ::GpuService::CudaMemFreeResults>(
      0xd9de01a7301802e8ull, 8, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::cudaMemFree(CudaMemFreeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "cudaMemFree",
      0xd9de01a7301802e8ull, 8);
}
::capnp::Request< ::GpuService::CreateCudaStreamParams,  ::GpuService::CreateCudaStreamResults>
GpuService::Client::createCudaStreamRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::CreateCudaStreamParams,  ::GpuService::CreateCudaStreamResults>(
      0xd9de01a7301802e8ull, 9, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::createCudaStream(CreateCudaStreamContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "createCudaStream",
      0xd9de01a7301802e8ull, 9);
}
::capnp::Request< ::GpuService::DestroyCudaStreamParams,  ::GpuService::DestroyCudaStreamResults>
GpuService::Client::destroyCudaStreamRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::DestroyCudaStreamParams,  ::GpuService::DestroyCudaStreamResults>(
      0xd9de01a7301802e8ull, 10, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::destroyCudaStream(DestroyCudaStreamContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "destroyCudaStream",
      0xd9de01a7301802e8ull, 10);
}
::capnp::Request< ::GpuService::SynchronizeCudaStreamParams,  ::GpuService::SynchronizeCudaStreamResults>
GpuService::Client::synchronizeCudaStreamRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::SynchronizeCudaStreamParams,  ::GpuService::SynchronizeCudaStreamResults>(
      0xd9de01a7301802e8ull, 11, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::synchronizeCudaStream(SynchronizeCudaStreamContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "synchronizeCudaStream",
      0xd9de01a7301802e8ull, 11);
}
::capnp::Request< ::GpuService::CudaKernelLaunchParams,  ::GpuService::CudaKernelLaunchResults>
GpuService::Client::cudaKernelLaunchRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::CudaKernelLaunchParams,  ::GpuService::CudaKernelLaunchResults>(
      0xd9de01a7301802e8ull, 12, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::cudaKernelLaunch(CudaKernelLaunchContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "cudaKernelLaunch",
      0xd9de01a7301802e8ull, 12);
}
::capnp::Request< ::GpuService::CreateEventParams,  ::GpuService::CreateEventResults>
GpuService::Client::createEventRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::CreateEventParams,  ::GpuService::CreateEventResults>(
      0xd9de01a7301802e8ull, 13, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::createEvent(CreateEventContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "createEvent",
      0xd9de01a7301802e8ull, 13);
}
::capnp::Request< ::GpuService::RecordEventParams,  ::GpuService::RecordEventResults>
GpuService::Client::recordEventRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::RecordEventParams,  ::GpuService::RecordEventResults>(
      0xd9de01a7301802e8ull, 14, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::recordEvent(RecordEventContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "recordEvent",
      0xd9de01a7301802e8ull, 14);
}
::capnp::Request< ::GpuService::EventSynchronizeParams,  ::GpuService::EventSynchronizeResults>
GpuService::Client::eventSynchronizeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::EventSynchronizeParams,  ::GpuService::EventSynchronizeResults>(
      0xd9de01a7301802e8ull, 15, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::eventSynchronize(EventSynchronizeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "eventSynchronize",
      0xd9de01a7301802e8ull, 15);
}
::capnp::Request< ::GpuService::DestroyEventParams,  ::GpuService::DestroyEventResults>
GpuService::Client::destroyEventRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::DestroyEventParams,  ::GpuService::DestroyEventResults>(
      0xd9de01a7301802e8ull, 16, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::destroyEvent(DestroyEventContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "destroyEvent",
      0xd9de01a7301802e8ull, 16);
}
::capnp::Request< ::GpuService::BatchKernelLaunchParams,  ::GpuService::BatchKernelLaunchResults>
GpuService::Client::batchKernelLaunchRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::BatchKernelLaunchParams,  ::GpuService::BatchKernelLaunchResults>(
      0xd9de01a7301802e8ull, 17, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::batchKernelLaunch(BatchKernelLaunchContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "batchKernelLaunch",
      0xd9de01a7301802e8ull, 17);
}
::capnp::Request< ::GpuService::MultiGpuCooperationParams,  ::GpuService::MultiGpuCooperationResults>
GpuService::Client::multiGpuCooperationRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GpuService::MultiGpuCooperationParams,  ::GpuService::MultiGpuCooperationResults>(
      0xd9de01a7301802e8ull, 18, sizeHint, {true});
}
::kj::Promise<void> GpuService::Server::multiGpuCooperation(MultiGpuCooperationContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "gpu.capnp:GpuService", "multiGpuCooperation",
      0xd9de01a7301802e8ull, 18);
}
::capnp::Capability::Server::DispatchCallResult GpuService::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd9de01a7301802e8ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("gpu.capnp:GpuService", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult GpuService::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        listGpus(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::ListGpusParams,  ::GpuService::ListGpusResults>(context)),
        false,
        false
      };
    case 1:
      return {
        getGpuStatus(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::GetGpuStatusParams,  ::GpuService::GetGpuStatusResults>(context)),
        false,
        false
      };
    case 2:
      return {
        acquireGpu(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::AcquireGpuParams,  ::GpuService::AcquireGpuResults>(context)),
        false,
        false
      };
    case 3:
      return {
        releaseGpu(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::ReleaseGpuParams,  ::GpuService::ReleaseGpuResults>(context)),
        false,
        false
      };
    case 4:
      return {
        runCommand(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::RunCommandParams,  ::GpuService::RunCommandResults>(context)),
        false,
        false
      };
    case 5:
      return {
        cudaInit(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::CudaInitParams,  ::GpuService::CudaInitResults>(context)),
        false,
        false
      };
    case 6:
      return {
        cudaMemAlloc(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::CudaMemAllocParams,  ::GpuService::CudaMemAllocResults>(context)),
        false,
        false
      };
    case 7:
      return {
        cudaMemcpy(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::CudaMemcpyParams,  ::GpuService::CudaMemcpyResults>(context)),
        false,
        false
      };
    case 8:
      return {
        cudaMemFree(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::CudaMemFreeParams,  ::GpuService::CudaMemFreeResults>(context)),
        false,
        false
      };
    case 9:
      return {
        createCudaStream(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::CreateCudaStreamParams,  ::GpuService::CreateCudaStreamResults>(context)),
        false,
        false
      };
    case 10:
      return {
        destroyCudaStream(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::DestroyCudaStreamParams,  ::GpuService::DestroyCudaStreamResults>(context)),
        false,
        false
      };
    case 11:
      return {
        synchronizeCudaStream(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::SynchronizeCudaStreamParams,  ::GpuService::SynchronizeCudaStreamResults>(context)),
        false,
        false
      };
    case 12:
      return {
        cudaKernelLaunch(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::CudaKernelLaunchParams,  ::GpuService::CudaKernelLaunchResults>(context)),
        false,
        false
      };
    case 13:
      return {
        createEvent(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::CreateEventParams,  ::GpuService::CreateEventResults>(context)),
        false,
        false
      };
    case 14:
      return {
        recordEvent(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::RecordEventParams,  ::GpuService::RecordEventResults>(context)),
        false,
        false
      };
    case 15:
      return {
        eventSynchronize(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::EventSynchronizeParams,  ::GpuService::EventSynchronizeResults>(context)),
        false,
        false
      };
    case 16:
      return {
        destroyEvent(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::DestroyEventParams,  ::GpuService::DestroyEventResults>(context)),
        false,
        false
      };
    case 17:
      return {
        batchKernelLaunch(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::BatchKernelLaunchParams,  ::GpuService::BatchKernelLaunchResults>(context)),
        false,
        false
      };
    case 18:
      return {
        multiGpuCooperation(::capnp::Capability::Server::internalGetTypedContext<
             ::GpuService::MultiGpuCooperationParams,  ::GpuService::MultiGpuCooperationResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "gpu.capnp:GpuService",
          0xd9de01a7301802e8ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// GpuService
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::ListGpusParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::ListGpusParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::ListGpusParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::ListGpusParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::ListGpusParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::ListGpusResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::ListGpusResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::ListGpusResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::ListGpusResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::ListGpusResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::GetGpuStatusParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::GetGpuStatusParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::GetGpuStatusParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::GetGpuStatusParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::GetGpuStatusParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::GetGpuStatusResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::GetGpuStatusResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::GetGpuStatusResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::GetGpuStatusResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::GetGpuStatusResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::AcquireGpuParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::AcquireGpuParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::AcquireGpuParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::AcquireGpuParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::AcquireGpuParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::AcquireGpuResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::AcquireGpuResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::AcquireGpuResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::AcquireGpuResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::AcquireGpuResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::ReleaseGpuParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::ReleaseGpuParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::ReleaseGpuParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::ReleaseGpuParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::ReleaseGpuParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::ReleaseGpuResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::ReleaseGpuResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::ReleaseGpuResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::ReleaseGpuResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::ReleaseGpuResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::RunCommandParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::RunCommandParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::RunCommandParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::RunCommandParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::RunCommandParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::RunCommandResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::RunCommandResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::RunCommandResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::RunCommandResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::RunCommandResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CudaInitParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CudaInitParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CudaInitParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CudaInitParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CudaInitParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CudaInitResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CudaInitResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CudaInitResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CudaInitResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CudaInitResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CudaMemAllocParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CudaMemAllocParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CudaMemAllocParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CudaMemAllocParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CudaMemAllocParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CudaMemAllocResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CudaMemAllocResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CudaMemAllocResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CudaMemAllocResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CudaMemAllocResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CudaMemcpyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CudaMemcpyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CudaMemcpyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CudaMemcpyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CudaMemcpyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CudaMemcpyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CudaMemcpyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CudaMemcpyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CudaMemcpyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CudaMemcpyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CudaMemFreeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CudaMemFreeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CudaMemFreeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CudaMemFreeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CudaMemFreeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CudaMemFreeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CudaMemFreeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CudaMemFreeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CudaMemFreeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CudaMemFreeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CreateCudaStreamParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CreateCudaStreamParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CreateCudaStreamParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CreateCudaStreamParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CreateCudaStreamParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CreateCudaStreamResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CreateCudaStreamResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CreateCudaStreamResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CreateCudaStreamResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CreateCudaStreamResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::DestroyCudaStreamParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::DestroyCudaStreamParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::DestroyCudaStreamParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::DestroyCudaStreamParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::DestroyCudaStreamParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::DestroyCudaStreamResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::DestroyCudaStreamResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::DestroyCudaStreamResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::DestroyCudaStreamResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::DestroyCudaStreamResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::SynchronizeCudaStreamParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::SynchronizeCudaStreamParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::SynchronizeCudaStreamParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::SynchronizeCudaStreamParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::SynchronizeCudaStreamParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::SynchronizeCudaStreamResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::SynchronizeCudaStreamResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::SynchronizeCudaStreamResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::SynchronizeCudaStreamResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::SynchronizeCudaStreamResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CudaKernelLaunchParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CudaKernelLaunchParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CudaKernelLaunchParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CudaKernelLaunchParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CudaKernelLaunchParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CudaKernelLaunchResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CudaKernelLaunchResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CudaKernelLaunchResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CudaKernelLaunchResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CudaKernelLaunchResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CreateEventParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CreateEventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CreateEventParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CreateEventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CreateEventParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::CreateEventResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::CreateEventResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::CreateEventResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::CreateEventResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::CreateEventResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::RecordEventParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::RecordEventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::RecordEventParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::RecordEventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::RecordEventParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::RecordEventResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::RecordEventResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::RecordEventResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::RecordEventResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::RecordEventResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::EventSynchronizeParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::EventSynchronizeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::EventSynchronizeParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::EventSynchronizeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::EventSynchronizeParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::EventSynchronizeResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::EventSynchronizeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::EventSynchronizeResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::EventSynchronizeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::EventSynchronizeResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::DestroyEventParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::DestroyEventParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::DestroyEventParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::DestroyEventParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::DestroyEventParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::DestroyEventResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::DestroyEventResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::DestroyEventResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::DestroyEventResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::DestroyEventResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::BatchKernelLaunchParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::BatchKernelLaunchParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::BatchKernelLaunchParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::BatchKernelLaunchParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::BatchKernelLaunchParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::BatchKernelLaunchResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::BatchKernelLaunchResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::BatchKernelLaunchResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::BatchKernelLaunchResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::BatchKernelLaunchResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::MultiGpuCooperationParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::MultiGpuCooperationParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::MultiGpuCooperationParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::MultiGpuCooperationParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::MultiGpuCooperationParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// GpuService::MultiGpuCooperationResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuService::MultiGpuCooperationResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuService::MultiGpuCooperationResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuService::MultiGpuCooperationResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuService::MultiGpuCooperationResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



