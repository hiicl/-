// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: control.capnp

#include "control.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<64> b_cbe23c66754f21ea = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    234,  33,  79, 117, 102,  60, 226, 203,
     14,   0,   0,   0,   1,   0,   1,   0,
    185, 247,  28, 225,  23, 203, 196, 186,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0, 171,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  46,
     99,  97, 112, 110, 112,  58,  71, 112,
    117,  73, 110, 102, 111,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    117, 117, 105, 100,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 111, 116,  97, 108,  77, 101, 109,
    111, 114, 121,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cbe23c66754f21ea = b_cbe23c66754f21ea.words;
#if !CAPNP_LITE
static const uint16_t m_cbe23c66754f21ea[] = {1, 2, 0};
static const uint16_t i_cbe23c66754f21ea[] = {0, 1, 2};
const ::capnp::_::RawSchema s_cbe23c66754f21ea = {
  0xcbe23c66754f21ea, b_cbe23c66754f21ea.words, 64, nullptr, m_cbe23c66754f21ea,
  0, 3, i_cbe23c66754f21ea, nullptr, nullptr, { &s_cbe23c66754f21ea, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_9c23ca4e41e25e63 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     99,  94, 226,  65,  78, 202,  35, 156,
     14,   0,   0,   0,   1,   0,   1,   0,
    185, 247,  28, 225,  23, 203, 196, 186,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    175,   0,   0,   0,  14,   1,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
    116, 104,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     92,  83,   2, 162, 135,  18,  89, 243,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 101, 112, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    114,  42, 151, 199,  99, 221, 255, 190,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,  97, 110, 100, 119, 105, 100, 116,
    104,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9c23ca4e41e25e63 = b_9c23ca4e41e25e63.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9c23ca4e41e25e63[] = {
  &s_beffdd63c7972a72,
  &s_f3591287a202535c,
};
static const uint16_t m_9c23ca4e41e25e63[] = {2, 1, 0};
static const uint16_t i_9c23ca4e41e25e63[] = {0, 1, 2};
const ::capnp::_::RawSchema s_9c23ca4e41e25e63 = {
  0x9c23ca4e41e25e63, b_9c23ca4e41e25e63.words, 68, d_9c23ca4e41e25e63, m_9c23ca4e41e25e63,
  2, 3, i_9c23ca4e41e25e63, nullptr, nullptr, { &s_9c23ca4e41e25e63, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<64> b_beffdd63c7972a72 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    114,  42, 151, 199,  99, 221, 255, 190,
     14,   0,   0,   0,   1,   0,   1,   0,
    185, 247,  28, 225,  23, 203, 196, 186,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   1,   0,   0, 108,   1,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    101, 112,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    100, 101, 118, 105,  99, 101,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 101, 109,  84, 121, 112, 101,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    202,  55, 227,  56, 246,  72, 204, 235,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 117, 109,  97,  78, 111, 100, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_beffdd63c7972a72 = b_beffdd63c7972a72.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_beffdd63c7972a72[] = {
  &s_ebcc48f638e337ca,
};
static const uint16_t m_beffdd63c7972a72[] = {0, 1, 2};
static const uint16_t i_beffdd63c7972a72[] = {0, 1, 2};
const ::capnp::_::RawSchema s_beffdd63c7972a72 = {
  0xbeffdd63c7972a72, b_beffdd63c7972a72.words, 64, d_beffdd63c7972a72, m_beffdd63c7972a72,
  1, 3, i_beffdd63c7972a72, nullptr, nullptr, { &s_beffdd63c7972a72, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_c9ac81de563bfdf4 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    244, 253,  59,  86, 222, 129, 172, 201,
     14,   0,   0,   0,   1,   0,   2,   0,
    185, 247,  28, 225,  23, 203, 196, 186,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   1,   0,   0, 214,   1,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  46,
     99,  97, 112, 110, 112,  58,  77, 101,
    116, 114, 105,  99, 115,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
    116, 104, 114, 111, 117, 103, 104, 112,
    117, 116,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,  97, 116, 101, 110,  99, 121,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,  82,  97, 116,
    101,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c9ac81de563bfdf4 = b_c9ac81de563bfdf4.words;
#if !CAPNP_LITE
static const uint16_t m_c9ac81de563bfdf4[] = {2, 1, 0};
static const uint16_t i_c9ac81de563bfdf4[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c9ac81de563bfdf4 = {
  0xc9ac81de563bfdf4, b_c9ac81de563bfdf4.words, 65, nullptr, m_c9ac81de563bfdf4,
  0, 3, i_c9ac81de563bfdf4, nullptr, nullptr, { &s_c9ac81de563bfdf4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<30> b_f3591287a202535c = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     92,  83,   2, 162, 135,  18,  89, 243,
     14,   0,   0,   0,   2,   0,   0,   0,
    185, 247,  28, 225,  23, 203, 196, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    218,   1,   0,   0,  24,   2,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  79,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  46,
     99,  97, 112, 110, 112,  58,  80,  97,
    116, 104,  84, 121, 112, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 118, 108, 105, 110, 107,   0,   0,
    120,  98, 117, 115,   0,   0,   0,   0,
    114, 111,  99, 101,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f3591287a202535c = b_f3591287a202535c.words;
#if !CAPNP_LITE
static const uint16_t m_f3591287a202535c[] = {0, 2, 1};
const ::capnp::_::RawSchema s_f3591287a202535c = {
  0xf3591287a202535c, b_f3591287a202535c.words, 30, nullptr, m_f3591287a202535c,
  0, 3, nullptr, nullptr, nullptr, { &s_f3591287a202535c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(PathType_f3591287a202535c, f3591287a202535c);
static const ::capnp::_::AlignedData<30> b_ebcc48f638e337ca = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    202,  55, 227,  56, 246,  72, 204, 235,
     14,   0,   0,   0,   2,   0,   0,   0,
    185, 247,  28, 225,  23, 203, 196, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     28,   2,   0,   0,  92,   2,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  79,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  46,
     99,  97, 112, 110, 112,  58,  77, 101,
    109,  84, 121, 112, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 118, 105,  99, 101,   0,   0,
    104, 111, 115, 116,   0,   0,   0,   0,
    117, 110, 105, 102, 105, 101, 100,   0, }
};
::capnp::word const* const bp_ebcc48f638e337ca = b_ebcc48f638e337ca.words;
#if !CAPNP_LITE
static const uint16_t m_ebcc48f638e337ca[] = {0, 1, 2};
const ::capnp::_::RawSchema s_ebcc48f638e337ca = {
  0xebcc48f638e337ca, b_ebcc48f638e337ca.words, 30, nullptr, m_ebcc48f638e337ca,
  0, 3, nullptr, nullptr, nullptr, { &s_ebcc48f638e337ca, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(MemType_ebcc48f638e337ca, ebcc48f638e337ca);
static const ::capnp::_::AlignedData<52> b_c156e63888e6a1af = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    175, 161, 230, 136,  56, 230,  86, 193,
     14,   0,   0,   0,   3,   0,   0,   0,
    185, 247,  28, 225,  23, 203, 196, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   2,   0,   0,  28,   3,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 199,   0,   0,   0,
    157,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  46,
     99,  97, 112, 110, 112,  58,  83,  99,
    104, 101, 100, 117, 108, 101, 114,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    192,  30, 207, 193,  68, 219,  98, 149,
     21,  62, 100,  57, 190,  12, 157, 143,
     81,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     94, 119, 142, 125,   2,  44, 109, 136,
     12, 155, 143, 127, 208,  57, 117, 218,
     61,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     54, 176, 102, 241, 146, 147,   4, 152,
    125,  49, 176, 112, 226,  29, 162, 222,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
    114, 101, 113, 117, 101, 115, 116,  80,
     97, 116, 104,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 112, 111, 114, 116,  77, 101,
    116, 114, 105,  99, 115,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 103, 105, 115, 116, 101, 114,
     71, 112, 117,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_c156e63888e6a1af = b_c156e63888e6a1af.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c156e63888e6a1af[] = {
  &s_886d2c027d8e775e,
  &s_8f9d0cbe39643e15,
  &s_9562db44c1cf1ec0,
  &s_98049392f166b036,
  &s_da7539d07f8f9b0c,
  &s_dea21de270b0317d,
};
static const uint16_t m_c156e63888e6a1af[] = {2, 1, 0};
const ::capnp::_::RawSchema s_c156e63888e6a1af = {
  0xc156e63888e6a1af, b_c156e63888e6a1af.words, 52, d_c156e63888e6a1af, m_c156e63888e6a1af,
  6, 3, nullptr, nullptr, nullptr, { &s_c156e63888e6a1af, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_9562db44c1cf1ec0 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    192,  30, 207, 193,  68, 219,  98, 149,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  46,
     99,  97, 112, 110, 112,  58,  83,  99,
    104, 101, 100, 117, 108, 101, 114,  46,
    114, 101, 113, 117, 101, 115, 116,  80,
     97, 116, 104,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    115, 114,  99,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 115, 116,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9562db44c1cf1ec0 = b_9562db44c1cf1ec0.words;
#if !CAPNP_LITE
static const uint16_t m_9562db44c1cf1ec0[] = {1, 0};
static const uint16_t i_9562db44c1cf1ec0[] = {0, 1};
const ::capnp::_::RawSchema s_9562db44c1cf1ec0 = {
  0x9562db44c1cf1ec0, b_9562db44c1cf1ec0.words, 50, nullptr, m_9562db44c1cf1ec0,
  0, 2, i_9562db44c1cf1ec0, nullptr, nullptr, { &s_9562db44c1cf1ec0, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8f9d0cbe39643e15 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     21,  62, 100,  57, 190,  12, 157, 143,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  46,
     99,  97, 112, 110, 112,  58,  83,  99,
    104, 101, 100, 117, 108, 101, 114,  46,
    114, 101, 113, 117, 101, 115, 116,  80,
     97, 116, 104,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 116, 104,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     99,  94, 226,  65,  78, 202,  35, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8f9d0cbe39643e15 = b_8f9d0cbe39643e15.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8f9d0cbe39643e15[] = {
  &s_9c23ca4e41e25e63,
};
static const uint16_t m_8f9d0cbe39643e15[] = {0};
static const uint16_t i_8f9d0cbe39643e15[] = {0};
const ::capnp::_::RawSchema s_8f9d0cbe39643e15 = {
  0x8f9d0cbe39643e15, b_8f9d0cbe39643e15.words, 35, d_8f9d0cbe39643e15, m_8f9d0cbe39643e15,
  1, 1, i_8f9d0cbe39643e15, nullptr, nullptr, { &s_8f9d0cbe39643e15, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_886d2c027d8e775e = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     94, 119, 142, 125,   2,  44, 109, 136,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  46,
     99,  97, 112, 110, 112,  58,  83,  99,
    104, 101, 100, 117, 108, 101, 114,  46,
    114, 101, 112, 111, 114, 116,  77, 101,
    116, 114, 105,  99, 115,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 116, 114, 105,  99, 115,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    244, 253,  59,  86, 222, 129, 172, 201,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_886d2c027d8e775e = b_886d2c027d8e775e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_886d2c027d8e775e[] = {
  &s_c9ac81de563bfdf4,
};
static const uint16_t m_886d2c027d8e775e[] = {0};
static const uint16_t i_886d2c027d8e775e[] = {0};
const ::capnp::_::RawSchema s_886d2c027d8e775e = {
  0x886d2c027d8e775e, b_886d2c027d8e775e.words, 35, d_886d2c027d8e775e, m_886d2c027d8e775e,
  1, 1, i_886d2c027d8e775e, nullptr, nullptr, { &s_886d2c027d8e775e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_da7539d07f8f9b0c = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     12, 155, 143, 127, 208,  57, 117, 218,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  46,
     99,  97, 112, 110, 112,  58,  83,  99,
    104, 101, 100, 117, 108, 101, 114,  46,
    114, 101, 112, 111, 114, 116,  77, 101,
    116, 114, 105,  99, 115,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_da7539d07f8f9b0c = b_da7539d07f8f9b0c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_da7539d07f8f9b0c = {
  0xda7539d07f8f9b0c, b_da7539d07f8f9b0c.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_da7539d07f8f9b0c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_98049392f166b036 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     54, 176, 102, 241, 146, 147,   4, 152,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  46,
     99,  97, 112, 110, 112,  58,  83,  99,
    104, 101, 100, 117, 108, 101, 114,  46,
    114, 101, 103, 105, 115, 116, 101, 114,
     71, 112, 117,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    234,  33,  79, 117, 102,  60, 226, 203,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_98049392f166b036 = b_98049392f166b036.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_98049392f166b036[] = {
  &s_cbe23c66754f21ea,
};
static const uint16_t m_98049392f166b036[] = {0};
static const uint16_t i_98049392f166b036[] = {0};
const ::capnp::_::RawSchema s_98049392f166b036 = {
  0x98049392f166b036, b_98049392f166b036.words, 35, d_98049392f166b036, m_98049392f166b036,
  1, 1, i_98049392f166b036, nullptr, nullptr, { &s_98049392f166b036, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_dea21de270b0317d = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    125,  49, 176, 112, 226,  29, 162, 222,
     24,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  46,
     99,  97, 112, 110, 112,  58,  83,  99,
    104, 101, 100, 117, 108, 101, 114,  46,
    114, 101, 103, 105, 115, 116, 101, 114,
     71, 112, 117,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dea21de270b0317d = b_dea21de270b0317d.words;
#if !CAPNP_LITE
static const uint16_t m_dea21de270b0317d[] = {0};
static const uint16_t i_dea21de270b0317d[] = {0};
const ::capnp::_::RawSchema s_dea21de270b0317d = {
  0xdea21de270b0317d, b_dea21de270b0317d.words, 35, nullptr, m_dea21de270b0317d,
  0, 1, i_dea21de270b0317d, nullptr, nullptr, { &s_dea21de270b0317d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// GpuInfo
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t GpuInfo::_capnpPrivate::dataWordSize;
constexpr uint16_t GpuInfo::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind GpuInfo::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GpuInfo::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Path
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Path::_capnpPrivate::dataWordSize;
constexpr uint16_t Path::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Path::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Path::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Step
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Step::_capnpPrivate::dataWordSize;
constexpr uint16_t Step::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Step::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Step::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Metrics
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Metrics::_capnpPrivate::dataWordSize;
constexpr uint16_t Metrics::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Metrics::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metrics::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::Scheduler::RequestPathParams,  ::Scheduler::RequestPathResults>
Scheduler::Client::requestPathRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Scheduler::RequestPathParams,  ::Scheduler::RequestPathResults>(
      0xc156e63888e6a1afull, 0, sizeHint, {true});
}
::kj::Promise<void> Scheduler::Server::requestPath(RequestPathContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "control.capnp:Scheduler", "requestPath",
      0xc156e63888e6a1afull, 0);
}
::capnp::Request< ::Scheduler::ReportMetricsParams,  ::Scheduler::ReportMetricsResults>
Scheduler::Client::reportMetricsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Scheduler::ReportMetricsParams,  ::Scheduler::ReportMetricsResults>(
      0xc156e63888e6a1afull, 1, sizeHint, {true});
}
::kj::Promise<void> Scheduler::Server::reportMetrics(ReportMetricsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "control.capnp:Scheduler", "reportMetrics",
      0xc156e63888e6a1afull, 1);
}
::capnp::Request< ::Scheduler::RegisterGpuParams,  ::Scheduler::RegisterGpuResults>
Scheduler::Client::registerGpuRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Scheduler::RegisterGpuParams,  ::Scheduler::RegisterGpuResults>(
      0xc156e63888e6a1afull, 2, sizeHint, {true});
}
::kj::Promise<void> Scheduler::Server::registerGpu(RegisterGpuContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "control.capnp:Scheduler", "registerGpu",
      0xc156e63888e6a1afull, 2);
}
::capnp::Capability::Server::DispatchCallResult Scheduler::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc156e63888e6a1afull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("control.capnp:Scheduler", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Scheduler::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        requestPath(::capnp::Capability::Server::internalGetTypedContext<
             ::Scheduler::RequestPathParams,  ::Scheduler::RequestPathResults>(context)),
        false,
        false
      };
    case 1:
      return {
        reportMetrics(::capnp::Capability::Server::internalGetTypedContext<
             ::Scheduler::ReportMetricsParams,  ::Scheduler::ReportMetricsResults>(context)),
        false,
        false
      };
    case 2:
      return {
        registerGpu(::capnp::Capability::Server::internalGetTypedContext<
             ::Scheduler::RegisterGpuParams,  ::Scheduler::RegisterGpuResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "control.capnp:Scheduler",
          0xc156e63888e6a1afull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Scheduler
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::RequestPathParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::RequestPathParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::RequestPathParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::RequestPathParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::RequestPathParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::RequestPathResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::RequestPathResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::RequestPathResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::RequestPathResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::RequestPathResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::ReportMetricsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::ReportMetricsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::ReportMetricsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::ReportMetricsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::ReportMetricsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::ReportMetricsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::ReportMetricsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::ReportMetricsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::ReportMetricsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::ReportMetricsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::RegisterGpuParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::RegisterGpuParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::RegisterGpuParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::RegisterGpuParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::RegisterGpuParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Scheduler::RegisterGpuResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Scheduler::RegisterGpuResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Scheduler::RegisterGpuResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Scheduler::RegisterGpuResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Scheduler::RegisterGpuResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



